#
# This file is created and updated by ansible, edit at your peril
#


upstream discovery_app_server {
    server 127.0.0.1:8381 fail_timeout=0;
}

# The Origin request header indicates where a fetch originates from. It doesn't include any path information,
# but only the server name (e.g. https://www.example.com).
# See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin for details.
#
# Here we set the value that is included in the Access-Control-Allow-Origin response header. If the origin is one
# of our known hosts--served via HTTP or HTTPS--we allow for CORS. Otherwise, we set the "null" value, disallowing CORS.
map $http_origin $cors_origin {
default "null";
}

server {
  server_name ~^((stage|prod)-)?discovery.*;

  listen 18381 ssl;
  ssl_certificate /etc/letsencrypt/live/preescolar.atentamente.mx/fullchain.pem; # managed by Certbot
  ssl_certificate_key /etc/letsencrypt/live/preescolar.atentamente.mx/privkey.pem; # managed by Certbot
  include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

  location ~ ^/static/(?P<file>.*) {
    root /edx/var/discovery;
    add_header 'Access-Control-Allow-Origin' $cors_origin;

    # Inform downstream caches to take certain headers into account when reading/writing to cache.
    add_header 'Vary' 'Accept-Encoding,Origin';

    try_files /staticfiles/$file =404;
  }

  location ~ ^/media/(?P<file>.*) {
    root /edx/var/discovery;
    try_files /media/$file =404;
  }

  location / {

    try_files $uri @proxy_to_app;
  }

  location ~ ^/(api)/ {
    try_files $uri @proxy_to_app;
  }


  location @proxy_to_app {
        proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $http_host;

    proxy_redirect off;
    proxy_pass http://discovery_app_server;
  }

  # Forward to HTTPS if we're an HTTP request...
  if ($http_x_forwarded_proto = "http") {
    set $do_redirect "true";
  }

  # Run our actual redirect...
  if ($do_redirect = "true") {
    rewrite ^ https://$host$request_uri? permanent;
  }
}
